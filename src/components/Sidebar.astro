---
// Sidebar.astro - Componente de barra lateral para entries con archivo y categorías
import type { CollectionEntry } from 'astro:content';
import '../styles/sidebar.css';

export interface Props {
  posts: CollectionEntry<'posts'>[];
}

const { posts } = Astro.props;

// Organizar posts por mes/año
const postsByDate = posts
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())
  .reduce((acc, post) => {
    const date = post.data.pubDate;
    const monthYear = date.toLocaleDateString('es-ES', { month: 'long', year: 'numeric' });
    
    if (!acc[monthYear]) {
      acc[monthYear] = [];
    }
    acc[monthYear].push(post);
    return acc;
  }, {} as Record<string, CollectionEntry<'posts'>[]>);

// Categorías predefinidas
const categories = {
  'Filosofía': posts.filter(post => post.data.tags?.some(tag => tag.toLowerCase().includes('filosofía') || tag.toLowerCase().includes('filosofia'))),
  'Análisis literarios': posts.filter(post => post.data.tags?.some(tag => tag.toLowerCase().includes('literatura') || tag.toLowerCase().includes('literario'))),
  'Cine y televisión': posts.filter(post => post.data.tags?.some(tag => tag.toLowerCase().includes('cine') || tag.toLowerCase().includes('televisión') || tag.toLowerCase().includes('television') || tag.toLowerCase().includes('tv')))
};
---

<aside class="sidebar">
  <!-- Sección Archivo -->
  <div class="sidebar-section">
    <h3 class="sidebar-title">
      <span class="title-text">Archivo</span>
      <button class="toggle-btn" data-section="archive">
        <svg class="chevron" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <polyline points="6,9 12,15 18,9"></polyline>
        </svg>
      </button>
    </h3>
    <div class="sidebar-content" id="archive-content">
      {Object.entries(postsByDate).map(([monthYear, monthPosts]) => (
        <div class="archive-month">
          <h4 class="month-title">
            <span class="title-text">{monthYear}
              <span class="post-count">({monthPosts.length})</span>
            </span>
            <button class="toggle-btn month-toggle" data-month={monthYear.replace(/\s+/g, '-')}>
              <svg class="chevron" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <polyline points="6,9 12,15 18,9"></polyline>
              </svg>
            </button>
          </h4>
          <ul class="post-list month-posts" id={`month-${monthYear.replace(/\s+/g, '-')}`}>
            {monthPosts.map(post => (
              <li class="post-item">
                <a href={`/blog/${post.slug}/`} class="post-link">
                  {post.data.title}
                </a>
              </li>
            ))}
          </ul>
        </div>
      ))}
    </div>
  </div>

  <!-- Sección Categorías -->
  <div class="sidebar-section">
    <h3 class="sidebar-title">
      <span class="title-text">Categorías</span>
      <button class="toggle-btn" data-section="categories">
        <svg class="chevron" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <polyline points="6,9 12,15 18,9"></polyline>
        </svg>
      </button>
    </h3>
    <div class="sidebar-content" id="categories-content">
      {Object.entries(categories).map(([categoryName, categoryPosts]) => (
        <div class="category-group">
          <h4 class="category-title">
            <span class="title-text">{categoryName}
              <span class="post-count">({categoryPosts.length})</span>
            </span>
            <button class="toggle-btn category-toggle" data-category={categoryName.replace(/\s+/g, '-').toLowerCase()}>
              <svg class="chevron" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <polyline points="6,9 12,15 18,9"></polyline>
              </svg>
            </button>
          </h4>
          <ul class="post-list category-posts" id={`category-${categoryName.replace(/\s+/g, '-').toLowerCase()}`}>
            {categoryPosts
              .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())
              .map(post => (
                <li class="post-item">
                  <a href={`/blog/${post.slug}/`} class="post-link">
                    {post.data.title}
                  </a>
                </li>
              ))}
          </ul>
        </div>
      ))}
    </div>
  </div>
</aside>

<script>
  // Funcionalidad de colapso/expansión
  document.addEventListener('DOMContentLoaded', () => {
    const toggleButtons = document.querySelectorAll('.toggle-btn');
    
    toggleButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Manejar secciones principales (Archivo y Categorías)
        const section = button.getAttribute('data-section');
        if (section) {
          const content = document.getElementById(`${section}-content`);
          const chevron = button.querySelector('.chevron');
          
          if (content && chevron) {
            const isExpanded = content.style.display !== 'none';
            
            content.style.display = isExpanded ? 'none' : 'block';
            (chevron as HTMLElement).style.transform = isExpanded ? 'rotate(-90deg)' : 'rotate(0deg)';
            
            // Guardar estado en localStorage
            localStorage.setItem(`sidebar-${section}`, isExpanded ? 'collapsed' : 'expanded');
          }
        }
        
        // Manejar meses individuales
        const month = button.getAttribute('data-month');
        if (month) {
          const content = document.getElementById(`month-${month}`);
          const chevron = button.querySelector('.chevron');
          
          if (content && chevron) {
            const isExpanded = content.style.display !== 'none';
            
            content.style.display = isExpanded ? 'none' : 'block';
            (chevron as HTMLElement).style.transform = isExpanded ? 'rotate(-90deg)' : 'rotate(0deg)';
            
            // Guardar estado en localStorage
            localStorage.setItem(`month-${month}`, isExpanded ? 'collapsed' : 'expanded');
          }
        }
        
        // Manejar categorías individuales
        const category = button.getAttribute('data-category');
        if (category) {
          const content = document.getElementById(`category-${category}`);
          const chevron = button.querySelector('.chevron');
          
          if (content && chevron) {
            const isExpanded = content.style.display !== 'none';
            
            content.style.display = isExpanded ? 'none' : 'block';
            (chevron as HTMLElement).style.transform = isExpanded ? 'rotate(-90deg)' : 'rotate(0deg)';
            
            // Guardar estado en localStorage
            localStorage.setItem(`category-${category}`, isExpanded ? 'collapsed' : 'expanded');
          }
        }
      });
    });
    
    // Restaurar estado desde localStorage para secciones principales
    ['archive', 'categories'].forEach(section => {
      const savedState = localStorage.getItem(`sidebar-${section}`);
      const content = document.getElementById(`${section}-content`);
      const button = document.querySelector(`[data-section="${section}"]`);
      const chevron = button?.querySelector('.chevron');
      
      if (savedState === 'collapsed' && content && chevron) {
        content.style.display = 'none';
        (chevron as HTMLElement).style.transform = 'rotate(-90deg)';
      }
    });
    
    // Restaurar estado desde localStorage para meses (contraídos por defecto)
    document.querySelectorAll('.month-toggle').forEach(button => {
      const month = button.getAttribute('data-month');
      const savedState = localStorage.getItem(`month-${month}`);
      const content = document.getElementById(`month-${month}`);
      const chevron = button.querySelector('.chevron');
      
      if (savedState === 'expanded') {
        // Solo expandir si está explícitamente guardado como expandido
        if (content) content.style.display = 'block';
        if (chevron) (chevron as HTMLElement).style.transform = 'rotate(0deg)';
      } else {
        // Por defecto contraído
        if (content) content.style.display = 'none';
        if (chevron) (chevron as HTMLElement).style.transform = 'rotate(-90deg)';
      }
    });
    
    // Restaurar estado desde localStorage para categorías (contraídas por defecto)
    document.querySelectorAll('.category-toggle').forEach(button => {
      const category = button.getAttribute('data-category');
      const savedState = localStorage.getItem(`category-${category}`);
      const content = document.getElementById(`category-${category}`);
      const chevron = button.querySelector('.chevron');
      
      if (savedState === 'expanded') {
        // Solo expandir si está explícitamente guardado como expandido
        if (content) content.style.display = 'block';
        if (chevron) (chevron as HTMLElement).style.transform = 'rotate(0deg)';
      } else {
        // Por defecto contraído
        if (content) content.style.display = 'none';
        if (chevron) (chevron as HTMLElement).style.transform = 'rotate(-90deg)';
      }
    });
  });
</script>